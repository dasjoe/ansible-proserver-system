---
- name: Handle old key removal
  when: system.features.authorized_keys_delete | default(False)
  block:
    - name: Ensure that the .ssh folder exists
      ansible.builtin.file:
        path: "/home/{{ item }}/.ssh"
        state: directory
        mode: 0700
        owner: "{{ item }}"
      loop: "{{ system.users.keys() }}"

    - name: Ensure that the authorized_keys file exists
      ansible.builtin.file:
        path: "/home/{{ item }}/.ssh/authorized_keys"
        state: touch
        modification_time: preserve
        access_time: preserve
      loop: "{{ system.users.keys() }}"

    - name: Create a backup of current authorized keys
      changed_when: false
      ansible.builtin.copy:
        remote_src: yes
        src: "/home/{{ item }}/.ssh/authorized_keys"
        dest: "/home/{{ item }}/.ssh/authorized_keys.bak"
      loop: "{{ system.users.keys() }}"

    - name: Clear authorized keys
      changed_when: false
      ansible.builtin.file:
        state: absent
        path: "/home/{{ item }}/.ssh/authorized_keys"
      loop: "{{ system.users.keys() }}"

- name: Add authorized keys
  register: authorized_keys_added
  changed_when: authorized_keys_added.changed and not (system.features.authorized_keys_delete | default(False))
  loop: >-
    {%- set user_authorized_key = [] -%}
    {%- for user, user_info in system.users.items() -%}
      {%- for authorized_key_list in (user_info.authorized_keys|default([], true)).values() -%}
        {%- if authorized_key_list is string -%}
          {%- set authorized_key_list = [authorized_key_list] -%}
        {%- endif -%}
        {%- for authorized_key in (authorized_key_list or []) -%}
          {%- set _ = user_authorized_key.append({
            'user': user,
            'key': authorized_key,
          }) -%}
        {%- endfor -%}
      {%- endfor -%}
    {%- endfor -%}
    {{- user_authorized_key -}}
  loop_control:
    label: '{{ item.user }} public_key="{{ item.key }}"'
  authorized_key:
    user: "{{ item.user }}"
    key: "{{ item.key }}"

- name: Clean up after key removal
  when: system.features.authorized_keys_delete | default(False)
  block:
    - name: Check if any keys have been added or removed
      ansible.builtin.shell:
        cmd: "diff /home/{{ item }}/.ssh/authorized_keys /home/{{ item }}/.ssh/authorized_keys.bak"
      register: diff_output
      failed_when: "diff_output.rc > 1"
      changed_when: "diff_output.rc > 0"
      loop: "{{ system.users.keys() }}"

    - name: Remove the backup file
      changed_when: false
      ansible.builtin.file:
        path: "/home/{{ item }}/.ssh/authorized_keys.bak"
        state: absent
      loop: "{{ system.users.keys() }}"

system:
  features:
    proserver_fact: no
    hostname: yes
    timezone: yes
    netplan: "{{ ansible_distribution == 'Ubuntu' }}"
    ufw: "{{ ansible_distribution == 'Ubuntu' }}"
    sysctl: "{{ ansible_distribution == 'Ubuntu' }}"
    hosts: yes
    environment: yes
    apt: "{{ ansible_distribution == 'Ubuntu' }}"
    proserver_user: no
    postfix: no
    users: yes
    sudoers: yes
    authorized_keys: yes
    motd: no
  prefix:
    sudoers: >-
      {%- if ansible_system == 'Linux' -%}
        /etc
      {%- else -%}
        /usr/local/etc
      {%- endif -%}
  proserver_fact:
    python: >-
      {%- if ansible_distribution == 'Ubuntu' and ansible_distribution_version == '18.04' -%}
        /usr/bin/env python3.8
      {%- else -%}
        /usr/bin/env python3
      {%- endif -%}
  network:
    public_interfaces: []
    public_subnets: []
  hostname:
  timezone:
  netplan: {}
  ufw:
    reset: "{{ system_ufw_reset|bool }}"
    state:
    policy:
    rules: {}
  sysctl: {}
  hosts: {}
  environment: {}
  apt:
    proxy:
    packages: {}
  postfix:
    prefix:
      config: >-
        {%- if ansible_system == 'Linux' -%}
          /etc/postfix
        {%- else -%}
          /usr/local/etc/postfix
        {%- endif -%}
    hash_maps: {}
    main.cf: {}
  sudoers: {}
  groups: {}
  users: {}
  motd:
    project:
    details: "{{ (((dehydrated|default({})).domains|default({})).keys()|list + ((dehydrated|default({})).domains|default({})).values()|list|sum(start=[]))|reject('eq', inventory_hostname)|reject('eq', ansible_nodename)|system_motd_sort_fqdns }}"
system_ufw_reset: no
